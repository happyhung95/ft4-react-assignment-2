{"version":3,"sources":["Hooks/useForm.js","api/axioInstance.js","Hooks/useApi.js","App.js","serviceWorker.js","HOC/Form.js","WrappedApp.js","HOC/WithApiAccess.js","index.js"],"names":["useForm","useState","state","setState","e","persist","target","value","api","axios","create","baseURL","interceptors","request","use","a","getData","cacheData","adapter","Promise","resolve","data","status","statusText","headers","config","undefined","response","error","reject","fullURL","url","hasOwnProperty","$","param","params","caches","open","cacheStorage","match","cachedResponse","ok","add","catch","json","UseApi","name","setData","setError","useEffect","AxioInstance","get","loadData","App","handleChange","setName","useApi","onSubmit","preventDefault","type","onChange","JSON","stringify","Boolean","window","location","hostname","Form","handleSubmit","WithApiAccess","Component","searchKey","setSearchKey","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","console","message"],"mappings":"uOAYeA,EAVC,WAAO,IAAD,EACKC,mBAAS,IADd,mBACbC,EADa,KACPC,EADO,KAOpB,MAAO,CAACD,EAJa,SAAAE,GACnBA,EAAEC,UACFF,EAASC,EAAEE,OAAOC,U,yDCJP,aACb,IAAMC,EAAMC,IAAMC,OAAO,CACvBC,QAAS,qCAKXH,EAAII,aAAaC,QAAQC,IAAzB,+BAAAC,EAAA,MAA6B,WAAOF,GAAP,eAAAE,EAAA,sEAEHC,EAAQH,GAFL,cAErBI,EAFqB,OAG3BJ,EAAQK,QAAU,WAChB,OAAOC,QAAQC,QAAQ,CAErBC,KAAMJ,EACNK,OAAQT,EAAQS,OAChBC,WAAYV,EAAQU,WACpBC,QAASX,EAAQW,QACjBC,OAAQZ,EACRA,aAXuB,kBAcpBA,GAdoB,2CAA7B,2DAeGa,GAEHlB,EAAII,aAAae,SAASb,KACxB,SAACa,GAAD,OAAcA,EAASN,QACvB,SAACO,GAAD,OAAWT,QAAQU,OAAOD,MAG5B,IAAMZ,EAAO,uCAAG,WAAOH,GAAP,mBAAAE,EAAA,6DACVe,EAAUjB,EAAQF,QAAUE,EAAQkB,IAEpClB,EAAQmB,eAAe,YACzBF,GAAO,WAAQG,IAAEC,MAAMrB,EAAQsB,UAJnB,SAQaC,OAAOC,KAAP,UAAeP,IAR5B,cAQRQ,EARQ,gBASaA,EAAaC,MAAb,UAAsBT,IATnC,WASVU,EATU,SAYUA,EAAeC,GAZzB,kCAaNH,EAAaI,IAAIZ,GAASa,OAAM,SAACf,GAAD,OAAWT,QAAQU,OAAOD,MAbpD,yBAcWU,EAAaC,MAAb,UAAsBT,IAdjC,QAcZU,EAdY,wCAgBPA,EAAeI,QAhBR,4CAAH,sDAmBb,OAAOpC,GCxBMqC,EAvBA,SAACC,GAAU,IAAD,EACC7C,mBAAS,MADV,mBAChBoB,EADgB,KACV0B,EADU,OAEG9C,mBAAS,MAFZ,mBAEhB2B,EAFgB,KAEToB,EAFS,KAoBvB,OAhBAC,qBAAU,WAAM,4CACd,8BAAAlC,EAAA,sEAEUP,EAAM0C,IAFhB,SAG2B1C,EAAI2C,IAAJ,gBAAiBL,IAH5C,OAGUnB,EAHV,OAIIoB,EAAQpB,GACRqB,EAAS,MALb,gDAOIA,EAAS,EAAD,IACRD,EAAQ,MARZ,0DADc,uBAAC,WAAD,wBAadK,KACC,CAACN,IAEG,CAACzB,EAAMO,ICYDyB,EA9BH,WAAO,IAAD,EACcrD,IADd,mBACTO,EADS,KACF+C,EADE,OAEQrD,mBAAS,IAFjB,mBAET6C,EAFS,KAEHS,EAFG,OAGMC,EAAOV,GAHb,mBAGTzB,EAHS,KAGHO,EAHG,KAUhB,OACE,6BACE,6EACA,0BAAM6B,SARW,SAACrD,GACpBA,EAAEsD,iBACFH,EAAQhD,KAQJ,+CAEE,2BACEoD,KAAK,OACLb,KAAK,QACLc,SAAUN,IAEZ,2BAAOK,KAAK,SAASpD,MAAM,aAG/B,6BAAMsD,KAAKC,UAAUzC,GAAQO,MCnBfmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3B,MACvB,2DChBN,IAkBe4B,EAlBF,SAAC,GAAiC,IAAhCb,EAA+B,EAA/BA,aAAac,EAAkB,EAAlBA,aAE1B,OACE,0BAAMX,SAAU,SAACrD,GAAD,OAAKgE,EAAahE,KAEhC,+CAEE,2BACEuD,KAAK,OACLb,KAAK,QACLc,SAAU,SAACxD,GAAD,OAAKkD,EAAalD,MAE9B,2BAAOuD,KAAK,SAASpD,MAAM,cCCpB8D,ECTO,SAACC,GAiBrB,OAhBA,WAAoB,IAAD,EACiBrE,mBAAS,IAD1B,mBACVsE,EADU,KACCC,EADD,OAEaxE,IAFb,mBAEVO,EAFU,KAEH+C,EAFG,OAGKE,EAAOe,GAHZ,mBAGVlD,EAHU,KAGJO,EAHI,KAQjB,OACE,6BACE,iEACA,kBAAC,EAAD,CAAM0B,aAAcA,EAAcc,aAPjB,SAAChE,GACpBA,EAAEsD,iBACFc,EAAajE,MAMX,kBAAC+D,EAAD,CAAWjD,KAAMA,EAAMO,MAAOA,MDJvByC,EAVI,SAAC,GAAkB,IAAjBhD,EAAgB,EAAhBA,KAAKO,EAAW,EAAXA,MAExB,OACE,6BACE,mEACA,6BAAMiC,KAAKC,UAAUzC,GAAQO,QEHnC6C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SJuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdxC,OAAM,SAAAf,GACLwD,QAAQxD,MAAMA,EAAMyD,c","file":"static/js/main.818af2a9.chunk.js","sourcesContent":["import {useState} from 'react';\r\n\r\nconst useForm = () => {\r\n  const [state,setState] = useState('');\r\n\r\n  const handleChange = e => {\r\n    e.persist();\r\n    setState(e.target.value)\r\n  }\r\n  return [state,handleChange]\r\n}\r\n\r\nexport default useForm;","import axios from \"axios\";\r\nimport $ from \"jquery\";\r\n\r\nexport default () => {\r\n  const api = axios.create({\r\n    baseURL: \"https://restcountries.eu/rest/v2\",\r\n  });\r\n\r\n  // intercept request to get data from cache\r\n  // if doesn't exist in cache then fetch from server => update cache => return data from cache\r\n  api.interceptors.request.use(async (request) => {\r\n    // eslint-disable-next-line no-use-before-define\r\n    const cacheData = await getData(request);\r\n    request.adapter = () => {\r\n      return Promise.resolve({\r\n        // stop sending the request, return with cache data\r\n        data: cacheData,\r\n        status: request.status,\r\n        statusText: request.statusText,\r\n        headers: request.headers,\r\n        config: request,\r\n        request,\r\n      });\r\n    };\r\n    return request;\r\n  }, undefined);\r\n\r\n  api.interceptors.response.use(\r\n    (response) => response.data,\r\n    (error) => Promise.reject(error)\r\n  );\r\n\r\n  const getData = async (request) => {\r\n    let fullURL = request.baseURL + request.url;\r\n    // eslint-disable-next-line no-prototype-builtins\r\n    if (request.hasOwnProperty(\"params\")) {\r\n      fullURL += `?${$.param(request.params)}`;\r\n    }\r\n\r\n    // Check caches\r\n    const cacheStorage = await caches.open(`${fullURL}`);\r\n    let cachedResponse = await cacheStorage.match(`${fullURL}`);\r\n\r\n    // If no match found in caches => send request => update response to cache\r\n    if (!cachedResponse || !cachedResponse.ok) {\r\n      await cacheStorage.add(fullURL).catch((error) => Promise.reject(error)); // get data from server and add to cache\r\n      cachedResponse = await cacheStorage.match(`${fullURL}`);\r\n    }\r\n    return cachedResponse.json(); // return data from cache\r\n  };\r\n\r\n  return api;\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nimport AxioInstance from \"../api/axioInstance\";\r\n\r\nconst UseApi = (name) => {\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function loadData() {\r\n      try {\r\n        const api = AxioInstance();\r\n        const response = await api.get(`/name/${name}`);\r\n        setData(response);\r\n        setError(null); // just for rendering if there was error before\r\n      } catch (exc) {\r\n        setError(exc);\r\n        setData(null); // just for rendering if there was data before\r\n      }\r\n    }\r\n    // eslint-disable-next-line no-use-before-define\r\n    loadData();\r\n  }, [name]);\r\n\r\n  return [data, error];\r\n};\r\n\r\nexport default UseApi;\r\n","import React, { useState } from \"react\";\r\n\r\nimport useForm from \"./Hooks/useForm\";\r\nimport useApi from \"./Hooks/useApi\";\r\n\r\n\r\nconst App = () => {\r\n  const [value, handleChange] = useForm();\r\n  const [name, setName] = useState('');\r\n  const [data, error] = useApi(name);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setName(value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>I am naked, not wrapped by anything. So cold!</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\r\n        <label>\r\n          Country name:\r\n          <input\r\n            type=\"text\"\r\n            name=\"cName\"\r\n            onChange={handleChange}\r\n          />\r\n          <input type=\"submit\" value=\"submit\" />\r\n        </label>\r\n      </form>\r\n      <div>{JSON.stringify(data || error)}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Form = ({handleChange,handleSubmit}) => {\r\n\r\n  return (\r\n    <form onSubmit={(e)=>handleSubmit(e)}>\r\n      {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\r\n      <label>\r\n        Country name:\r\n        <input\r\n          type=\"text\"\r\n          name=\"cName\"\r\n          onChange={(e)=>handleChange(e)}\r\n        />\r\n        <input type=\"submit\" value=\"submit\" />\r\n      </label>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nimport WithApiAccess from \"./HOC/WithApiAccess\";\r\n\r\n\r\nconst WrappedApp = ({data,error}) => {\r\n\r\n  return (\r\n    <div>\r\n      <h2>I am being wrapped by HOC, so warm!</h2>\r\n      <div>{JSON.stringify(data || error)}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WithApiAccess(WrappedApp);","import React, { useState } from \"react\";\r\n\r\nimport useApi from \"../Hooks/useApi\";\r\nimport useForm from \"../Hooks/useForm\";\r\nimport Form from \"./Form\";\r\n\r\nconst WithApiAccess = (Component) => {\r\n  function Wrapper() {\r\n    const [searchKey, setSearchKey] = useState(\"\");\r\n    const [value, handleChange] = useForm();\r\n    const [data, error] = useApi(searchKey);\r\n    const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      setSearchKey(value);\r\n    };\r\n    return (\r\n      <div>\r\n        <h2> I am the wrapper, I'll wrap you!</h2>\r\n        <Form handleChange={handleChange} handleSubmit={handleSubmit} />\r\n        <Component data={data} error={error} />\r\n      </div>\r\n    );\r\n  }\r\n  return Wrapper;\r\n};\r\n\r\nexport default WithApiAccess;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport WrappedApp from \"./WrappedApp\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <WrappedApp/>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}